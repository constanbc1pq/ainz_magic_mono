// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  username    String
  password    String
  avatar      String?
  isActive    Boolean   @default(true) @map("is_active")
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // 关联
  projects       Project[]
  modelProcesses ModelProcess[]

  @@map("users")
}

model Project {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  type        ProjectType       @default(MODEL_TO_SKELETON)
  status      ProjectStatus     @default(CREATED)
  userPrompt  String?           @map("user_prompt") @db.Text
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  // 关联
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 项目依赖关系
  parentProjectId Int?      @map("parent_project_id")
  parentProject   Project?  @relation("ProjectDependency", fields: [parentProjectId], references: [id])
  childProjects   Project[] @relation("ProjectDependency")

  models Model[]
  files  ProjectFile[]

  @@map("projects")
}

model Model {
  id               Int       @id @default(autoincrement())
  originalFilename String    @map("original_filename")
  filePath         String    @map("file_path")
  fileSize         BigInt    @map("file_size")
  vertexCount      Int?      @map("vertex_count")
  faceCount        Int?      @map("face_count")
  createdAt        DateTime  @default(now()) @map("created_at")

  // 关联
  projectId Int     @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  results ArticulationResult[]

  @@map("models")
}

model ArticulationResult {
  id                    Int     @id @default(autoincrement())
  skeletonData          Json?   @map("skeleton_data")
  jointCount            Int?    @map("joint_count")
  boneCount             Int?    @map("bone_count")
  processingTime        Float?  @map("processing_time")
  resultFilePath        String? @map("result_file_path")
  userPrompt            String? @map("user_prompt") @db.Text
  promptInfluenceScore  Float?  @map("prompt_influence_score")
  createdAt             DateTime @default(now()) @map("created_at")

  // 关联
  modelId Int   @map("model_id")
  model   Model @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@map("articulation_results")
}

model PromptTemplate {
  id          Int      @id @default(autoincrement())
  category    String
  template    String   @db.Text
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("prompt_templates")
}

model ModelProcess {
  id               String    @id @default(uuid())
  originalFilename String    @map("original_filename")
  filePath         String    @map("file_path")
  userPrompt       String    @map("user_prompt") @db.Text
  templateId       String    @map("template_id")
  promptWeight     Float     @map("prompt_weight")
  status           String    @default("processing")
  progress         Int       @default(0)
  error            String?   @db.Text
  resultPath       String?   @map("result_path")
  resultFilename   String?   @map("result_filename")
  resultUrl        String?   @map("result_url")
  filesSaved       Boolean   @default(false) @map("files_saved")
  filesSavedAt     DateTime? @map("files_saved_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // 关联
  userId Int?  @map("user_id")
  user   User? @relation(fields: [userId], references: [id])
  files  ProcessingFile[]

  @@map("model_processes")
}

model ProcessingFile {
  id            String    @id @default(uuid())
  fileType      FileType  @map("file_type")
  filePath      String    @map("file_path")
  fileName      String    @map("file_name")
  fileSizeBytes BigInt    @map("file_size_bytes")
  createdAt     DateTime  @default(now()) @map("created_at")

  // 关联
  modelProcessId String       @map("model_process_id")
  modelProcess   ModelProcess @relation(fields: [modelProcessId], references: [id], onDelete: Cascade)

  @@map("processing_files")
}

enum ProjectStatus {
  CREATED
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}

enum ProjectType {
  IMAGE_TO_3D       // 图片生成3D模型
  MODEL_TO_SKELETON // 3D模型生成骨骼
}

enum FileType {
  OBJ
  TXT
  JSON
  ZIP
  GLB
  PLY
  STL
  IMAGE
}

model ProjectFile {
  id        String   @id @default(uuid())
  fileName  String   @map("file_name")
  filePath  String   @map("file_path")
  fileType  String   @map("file_type") // 'image', 'model', 'skeleton', 'json'
  fileSize  BigInt   @map("file_size")
  mimeType  String   @map("mime_type")
  isInput   Boolean  @default(true) @map("is_input")
  createdAt DateTime @default(now()) @map("created_at")

  // 关联
  projectId Int     @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_files")
}